import os
import requests
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from tqdm import tqdm
import base64
import certifi
import threading

# Ch·ªâ ƒë·ªãnh file cacert.pem
os.environ["SSL_CERT_FILE"] = os.path.join(os.path.dirname(__file__), "cacert.pem")
os.environ["REQUESTS_CA_BUNDLE"] = os.environ["SSL_CERT_FILE"]
API_URL = "https://snapvideo.io/wp-json/aio-dl/video-data/"

# H√†m t√≠nh to√°n hash
def calculate_hash(url: str, salt: str) -> str:
    url_b64 = base64.b64encode(url.encode()).decode()
    salt_b64 = base64.b64encode(salt.encode()).decode()
    return f"{url_b64}L{len(url) + 1000}L{salt_b64}"

# C·∫≠p nh·∫≠t log v√†o giao di·ªán
def update_log(message):
    log_text.insert(tk.END, message + "\n")
    log_text.see(tk.END)  # T·ª± ƒë·ªông cu·ªôn xu·ªëng d√≤ng m·ªõi nh·∫•t
    root.update_idletasks()

# H√†m t·∫£i video
def download_video(video_url, save_path):
    """T·∫£i video t·ª´ URL v√† hi·ªÉn th·ªã ti·∫øn tr√¨nh"""
    response = requests.get(video_url, stream=True)
    total_size = int(response.headers.get("content-length", 0))
    
    # if total_size == 0:
    #     update_log(f"‚ùå Kh√¥ng th·ªÉ t·∫£i: {video_url} (Dung l∆∞·ª£ng kh√¥ng x√°c ƒë·ªãnh)")
    #     return

    update_log(f"üì• ƒêang t·∫£i: {save_path} ({total_size / 1024:.2f} KB)")

    with open(save_path, "wb") as file, tqdm(
        desc=save_path,
        total=total_size,
        unit="B",
        unit_scale=True,
        unit_divisor=1024,
    ) as bar:
        for chunk in response.iter_content(chunk_size=1024):
            if chunk:
                file.write(chunk)
                bar.update(len(chunk))
    
    update_log(f"‚úÖ Ho√†n th√†nh: {save_path}")

# H√†m l·∫•y link t·∫£i video v√† t·∫£i xu·ªëng
def fetch_download_links():
    """L·∫•y link t·ª´ API v√† t·∫£i xu·ªëng"""
    urls = text_input.get("1.0", tk.END).strip().split("\n")
    save_folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u video")

    if not save_folder:
        return

    for url in urls:
        url = url.strip()
        if not url:
            continue

        hash_value = calculate_hash(url, 'aio-dl')
        update_log(f"üîç ƒêang x·ª≠ l√Ω: {url}")

        try:
            response = requests.post(API_URL, data={"url": url, "token": "your_token", "hash": hash_value}, verify=True)
            data = response.json()
            videos = data.get("medias", [])

            if not videos:
                update_log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video cho {url}")
                continue

            for video in videos:
                if video["extension"] == "mp4":
                    file_name = f"{video['quality']}.mp4"
                    save_path = os.path.join(save_folder, file_name)
                    
                    # Ch·∫°y t·∫£i video tr√™n m·ªôt lu·ªìng ri√™ng
                    threading.Thread(target=download_video, args=(video["url"], save_path), daemon=True).start()

        except Exception as e:
            update_log(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")

    messagebox.showinfo("ƒê√£ ƒë·ªçc url", "ƒêang b·∫Øt ƒë·∫ßu t·∫£i xu·ªëng!")

# Giao di·ªán Tkinter
root = tk.Tk()
root.title("T·∫£i Video")

tk.Label(root, text="Nh·∫≠p danh s√°ch URL (m·ªói d√≤ng m·ªôt link):").pack()
text_input = tk.Text(root, height=10, width=50)
text_input.pack()

btn_download = tk.Button(root, text="T·∫£i Video", command=lambda: threading.Thread(target=fetch_download_links, daemon=True).start())
btn_download.pack()

# Th√™m v√πng hi·ªÉn th·ªã log
log_text = scrolledtext.ScrolledText(root, height=10, width=60, state="normal")
log_text.pack()

root.mainloop()
